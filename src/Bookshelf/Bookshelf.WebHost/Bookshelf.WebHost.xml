<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bookshelf.WebHost</name>
    </assembly>
    <members>
        <member name="T:Bookshelf.WebHost.Controllers.AuthController">
            <summary>
            Controller containig endpoints related to token issuing and validating.
            </summary>
        </member>
        <member name="M:Bookshelf.WebHost.Controllers.AuthController.#ctor(Bookshelf.Authorization.Interfaces.ITokenService,Bookshelf.Authorization.Interfaces.IRegisterService,Bookshelf.Utils.AppExecutor,AutoMapper.IMapper)">
            <summary>
            Instantiates AuthController
            </summary>
            <param name="tokenService"></param>
            <param name="registerService"></param>
            <param name="appExecutor"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Bookshelf.WebHost.Controllers.AuthController.GetToken(Bookshelf.WebContract.Auth.Request.LoginRequest)">
            <summary>
            Generates Bearer token based on email and password. 
            Token contains account roles (if any assigned).
            </summary>
            <param name="request"><see cref="T:Bookshelf.WebContract.Auth.Request.LoginRequest"/></param>
            <returns></returns>
        </member>
        <member name="M:Bookshelf.WebHost.Controllers.AuthController.IsTokenValid">
            <summary>
            Validates if token is valid.
            If everything is ok it returns 200, when token is invalid or account cannot sign in (e.g. is blocked) - returns 403.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bookshelf.WebHost.Controllers.AuthController.RegisterAsync(Bookshelf.WebContract.Auth.Request.RegisterRequest)">
            <summary>
            Registers new user.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Bookshelf.WebHost.Controllers.AuthorController">
            <summary>
            Controller containing methods connected with Authors.
            </summary>
        </member>
        <member name="M:Bookshelf.WebHost.Controllers.AuthorController.#ctor(Bookshelf.Utils.AppExecutor,AutoMapper.IMapper)">
            <summary>
            Instantiates AuthorController.
            </summary>
            <param name="appExecutor"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Bookshelf.WebHost.Controllers.AuthorController.GetAuthorById(System.Int32)">
            <summary>
            Returns single author by its identifier.
            </summary>
            <param name="authorId"></param>
            <returns></returns>
        </member>
        <member name="M:Bookshelf.WebHost.Controllers.AuthorController.GetBooksByAuthor(System.Int32,Bookshelf.WebContract.Book.Request.GetBooksByAuthorRequest)">
            <summary>
            Returns list of books assigned to given author.
            </summary>
            <param name="authorId"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Bookshelf.WebHost.Controllers.AuthorController.CreateAuthor(Bookshelf.WebContract.Author.Request.CreateAuthorRequest)">
            <summary>
            Creates new author.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Bookshelf.WebHost.Controllers.Base.BaseBookshelfController">
            <summary>
            Base class for all controllers. Contains method to handle CommandResults and QueryResults.
            </summary>
        </member>
        <member name="P:Bookshelf.WebHost.Controllers.Base.BaseBookshelfController.CurrentAccountGuid">
            <summary>
            Returns GUID of currently logged used, based on its JWT token.
            </summary>
        </member>
        <member name="P:Bookshelf.WebHost.Controllers.Base.BaseBookshelfController.CurrentAccountRoles">
            <summary>
            Returns list of roles assigned to currently logged used.
            </summary>
        </member>
        <member name="P:Bookshelf.WebHost.Controllers.Base.BaseBookshelfController.CurrentAccountId">
            <summary>
            Returns id of currently logged account. Id is retrieved from DB based on account GUID stored in JWT token.
            </summary>
        </member>
        <member name="F:Bookshelf.WebHost.Controllers.Base.BaseBookshelfController.appExecutor">
            <summary>
            Instance of AppExecutor. Dispatech Queries and Commands to execute.
            </summary>
        </member>
        <member name="F:Bookshelf.WebHost.Controllers.Base.BaseBookshelfController.mapper">
            <summary>
            Instance of IMapper. Used to map/cast commands, request, reults etc.
            </summary>
        </member>
        <member name="M:Bookshelf.WebHost.Controllers.Base.BaseBookshelfController.#ctor(Bookshelf.Utils.AppExecutor,AutoMapper.IMapper)">
            <summary>
            Instantiates LegeArtisBaseController.
            </summary>
            <param name="executor"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Bookshelf.WebHost.Controllers.Base.BaseBookshelfController.HandleCommandResult(Bookshelf.Contract.Base.CommandResult)">
            <summary>
            Handles Command result. If Command is successful returns NoContent, otherwise - returns BadRequest.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Bookshelf.WebHost.Controllers.Base.BaseBookshelfController.HandleQueryResult``1(``0)">
            <summary>
            Handles Query results. 
            Determines if result is collection or single element and executes proper method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Bookshelf.WebHost.Controllers.BookController">
            <summary>
            Controller containing methods connected with Books.
            </summary>
        </member>
        <member name="M:Bookshelf.WebHost.Controllers.BookController.#ctor(Bookshelf.Utils.AppExecutor,AutoMapper.IMapper)">
            <summary>
            Instantiates BookController.
            </summary>
            <param name="appExecutor"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Bookshelf.WebHost.Controllers.BookController.CreateBook(Bookshelf.WebContract.Book.Request.CreateBookRequest)">
            <summary>
            Creates new book
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Bookshelf.WebHost.Controllers.BookController.GetBookById(System.Int32)">
            <summary>
            Returns single book by its identifier.
            </summary>
            <param name="bookId"></param>
            <returns></returns>
        </member>
        <member name="T:Bookshelf.WebHost.Extensions.IServiceCollectionEndpointPoliciesExtensions">
            <summary>
            Contains extensions of <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection">IServiceCollection</see> to add Authorization and to register
            Authorization Polices based on roles.
            </summary>
        </member>
        <member name="M:Bookshelf.WebHost.Extensions.IServiceCollectionEndpointPoliciesExtensions.RegisterAuthorizationPolicies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers Authorization.
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:Bookshelf.WebHost.Extensions.IServiceCollectionSwaggerExtensions">
            <summary>
            Contains extensions of <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection">IServiceCollection</see> to register Swagger
            </summary>
        </member>
        <member name="M:Bookshelf.WebHost.Extensions.IServiceCollectionSwaggerExtensions.RegisterSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers Swagger.
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:Bookshelf.WebHost.Program">
            <summary>
            Main Application class.
            </summary>
        </member>
        <member name="M:Bookshelf.WebHost.Program.Main">
            <summary>
            Application entry point.
            </summary>
        </member>
        <member name="M:Bookshelf.WebHost.Program.CreateHostBuilder(System.String[])">
            <summary>
            Prepares IHostBuilder object using Startup configuration.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Bookshelf.WebHost.Startup">
            <summary>
            WebHost configuration class.
            </summary>
        </member>
        <member name="M:Bookshelf.WebHost.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Instatiates Startup class.
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:Bookshelf.WebHost.Startup.Configuration">
            <summary>
            Contains all configuration (json files, environment, app arguments).
            </summary>
        </member>
        <member name="M:Bookshelf.WebHost.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Register services in IoC container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Bookshelf.WebHost.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Bookshelf.Utils.GlobalConfig,Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider)">
            <summary>
            This method gets called by the runtime.
            Configures HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="config"></param>
            <param name="actionDescriptorCollectionProvider"></param>
        </member>
    </members>
</doc>
